{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# MIC Project Image denoising and inpainting using Deep learning techniques\n# Here we are going to use Denoising Auto-encoder as basic form \n# Further we use K stacked denoising auto encoders for initializing our weights\n# and then use a deep learning model with 2K-1 hidden layers to finally train our data\n# then this will be used for testing\n\n# First, We will create DA model having inputs (xi,yi) and then we will train it and our DA will have output\n# layer having h(input)\n# then we will predict each xi and yi to get h(xi) and h(yi) and then we will give this to out DA as input again\n# as the weights will already be initialized inside the model cause we are not reconstructing it\n\n# %% [code]\n!pip install patchify\n\n# %% [code]\n#imports\nimport os\nimport random\nimport pathlib\nimport tensorflow as tf\nfrom tensorflow.keras.utils import Sequence\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tqdm import tqdm\nfrom itertools import chain\nfrom skimage.io import imread, imshow, imread_collection, concatenate_images\nfrom skimage.transform import resize\nfrom skimage.morphology import label\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import activations\n\n\n\nfrom tensorflow.keras.layers import ZeroPadding2D\nfrom keras.models import Model, load_model\nfrom keras.layers import Input, Dense\nfrom keras.layers.core import Dropout, Lambda\nfrom keras.layers.convolutional import Conv2D, Conv2DTranspose\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.merge import concatenate\nfrom keras.layers import Cropping2D\nfrom tensorflow.keras import activations\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras import regularizers\nfrom keras import backend as K\nimport cv2\nfrom matplotlib import image as matimg, pyplot\nimport tensorflow as tf\nfrom PIL import Image as im\nfrom tensorflow.keras.layers import Layer\nfrom tensorflow.keras.optimizers import Adam\nimport pickle\nimport keras.backend as K\n\n# %% [code]\nDIM = 32\nbeta = 0.01\npho = 0.005\n\n# %% [code]\n#Adding gaussian iid noise to the images\n# barbara\nbarbara = np.array(im.open('../input/imageinpainting/barbara.pgm'))/256*1.0\nbarbara = barbara[0:512:2,0:512:2]\npyplot.imshow(barbara,'gray')\npyplot.show()\nprint(barbara.shape)\n\n#lena\nlena = np.array(im.open('../input/imageinpainting/lena.tif'))/256*1.0\nlena = lena[0:256:1,0:256:1]\npyplot.imshow(lena,'gray')\npyplot.show()\nprint(lena.shape)\n\n#mandrill\nmandrill = np.array(im.open('../input/imageinpainting/mandrill.pgm'))/256*1.0\nmandrill = mandrill[0:256:1,0:256:1]\npyplot.imshow(mandrill,'gray')\npyplot.show()\nprint(mandrill.shape)\n\n#monalisa\nmonalisa = np.array(im.open('../input/imageinpainting/monalisa.pgm'))/256*1.0\nmonalisa = monalisa[0:256:1,0:256:1]\npyplot.imshow(monalisa,'gray')\npyplot.show()\nprint(monalisa.shape)\n\n#caman\ncaman = np.array(im.open('../input/imageinpainting/caman.tif'))/256*1.0\ncaman = caman[0:256:1,0:256:1]\npyplot.imshow(caman,'gray')\npyplot.show()\nprint(caman.shape)\n\n#einstein\neinstein = np.array(im.open('../input/imageinpainting/einstein.pgm'))/256*1.0\neinstein = einstein[0:256:1,0:256:1]\npyplot.imshow(einstein,'gray')\npyplot.show()\nprint(einstein.shape)\n\nnoisedbarbara = barbara + np.random.normal(0, .01,(256,256))\npyplot.imshow(noisedbarbara,'gray')\npyplot.show()\nnoisedlena = lena + np.random.normal(0, .01,(256,256))\npyplot.imshow(noisedlena,'gray')\npyplot.show()\nnoisedmandrill = mandrill + np.random.normal(0, .01,(256,256))\npyplot.imshow(noisedmandrill,'gray')\npyplot.show()\nnoisedmonalisa = monalisa + np.random.normal(0, .01,(256,256))\npyplot.imshow(noisedmonalisa,'gray')\npyplot.show()\nnoisedcaman = caman + np.random.normal(0, .01,(256,256))\npyplot.imshow(noisedcaman,'gray')\npyplot.show()\nnoisedeinstein = einstein + np.random.normal(0, .01,(256,256))\npyplot.imshow(noisedeinstein,'gray')\npyplot.show()\n\nnoisedbarbara = barbara\nnoisedcaman = caman\nnoisedeinstein = einstein\nnoisedmonalisa = monalisa\nnoisedmandrill = mandrill\nnoisedlena = lena\n\nimages = np.zeros((64*6,32*32))\nnoiseAddedimages = np.zeros((64*6,32*32))\nfor i in range(0,8):\n    for j in range(0,8):\n        images[i*8+j]=barbara[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n        noiseAddedimages[i*8+j] = noisedbarbara[i*32:i*32+32,j*32:j*32+32].reshape(-1)\nfor i in range(0,8):\n    for j in range(0,8):\n        images[64+i*8+j]=lena[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n        noiseAddedimages[64+i*8+j] = noisedlena[i*32:i*32+32,j*32:j*32+32].reshape(-1)\nfor i in range(0,8):\n    for j in range(0,8):\n        images[64*2+i*8+j]=mandrill[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n        noiseAddedimages[64*2+i*8+j] = noisedmandrill[i*32:i*32+32,j*32:j*32+32].reshape(-1)\nfor i in range(0,8):\n    for j in range(0,8):\n        images[64*3+i*8+j]=monalisa[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n        noiseAddedimages[64*3+i*8+j] = noisedmonalisa[i*32:i*32+32,j*32:j*32+32].reshape(-1)\nfor i in range(0,8):\n    for j in range(0,8):\n        images[64*4+i*8+j]=caman[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n        noiseAddedimages[64*4+i*8+j] = noisedcaman[i*32:i*32+32,j*32:j*32+32].reshape(-1)\nfor i in range(0,8):\n    for j in range(0,8):\n        images[64*5+i*8+j]=einstein[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n        noiseAddedimages[64*5+i*8+j] = noisedeinstein[i*32:i*32+32,j*32:j*32+32].reshape(-1)\n\n# images[0] = barbara.reshape(-1)\n# images[1] = lena.reshape(-1)\n# images[2] = mandrill.reshape(-1)\n# images[3] = monalisa.reshape(-1)\n# images[4] = caman.reshape(-1)\n# images[5] = einstein.reshape(-1)\n# noiseAddedimages = np.zeros((6,32*32))\n# noiseAddedimages[0] = barbara.reshape(-1)+np.random.normal(0, .1,(32*32))\n# noiseAddedimages[1] = lena.reshape(-1)+np.random.normal(0, .1,(32*32))\n# noiseAddedimages[2] = mandrill.reshape(-1)+np.random.normal(0, .1,(32*32))\n# noiseAddedimages[3] = monalisa.reshape(-1)+np.random.normal(0, .1,(32*32))\n# noiseAddedimages[4] = caman.reshape(-1)+np.random.normal(0, .1,(32*32))\n# noiseAddedimages[5] = einstein.reshape(-1)+np.random.normal(0, .1,(32*32))\n# pyplot.imshow(noiseAddedimages[0].reshape(32,32),'gray')\n# print(np.sum((images[0]-noiseAddedimages[0])**2))\n\n# %% [code]\npatches = patchify(barbara,(DIM,DIM),step=16)\nprint(patches.shape)\npatches = patches.reshape(225,DIM,DIM)\nimages = patches\nnoiseAddedimages = patchify(noisedbarbara,(DIM,DIM),step=16)\nnoiseAddedimages = noiseAddedimages.reshape(225,DIM,DIM)\nprint(images.shape)\nprint(noiseAddedimages.shape)\n\n# %% [code]\ndef custom_loss1(y_true, y_pred):\n    loss = K.square(y_pred - y_true)\n    print(loss.shape)\n    loss = K.sum(loss,axis=0)\n    print(loss.shape)\n    loss = loss*0.5\n    loss = K.mean(loss)\n    print(loss.shape)\n    return loss\n    \n\n# %% [code]\ndef sparsity_loss(y):\n    print(y.shape)\n    y = y*1.0\n    val = K.mean(y,axis=0)\n    print(val)\n    print(val.shape)\n#     const = tf.constant(pho,shape=val.shape,dtype=tf.float32)\n#     a1 = tf.divide(const,val);\n#     print(a1.shape)\n#     const1 = tf.constant(-1,shape=val.shape,dtype=tf.float32)\n#     a2 = tf.add(const1,val)\n#     a2 = tf.multiply(const1,a2)\n#     print(a2.shape)\n#     const2 = tf.constant(1-pho,shape=val.shape,dtype=tf.float32)\n#     a2 = tf.divide(const2,a2)\n#     print(a2.shape)\n#     loss = tf.multiply(const,K.log(a1)) + tf.multiply(const2,K.log(a2))\n    a1 = pho/val;\n    a2 = 1-val;\n    a2 = (1-pho)/a2\n    loss = pho*K.log(a1) + (1-pho)*K.log(a2)\n    print(loss.shape)\n    loss = beta*K.sum(loss)\n    print(loss.shape)\n    return loss;\n\n# %% [code]\nactivation = \"sigmoid\"\nkernel_initializer = \"random_normal\"\n\ninputs = Input((256,256))\ns  = Lambda(lambda x: x) (inputs)\nlayer1 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns1 = layer1(s)\nlayer2 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns2 = layer2(s1)\n\nmodel = Model(inputs = inputs, outputs =[s2])\n\nsparsity = sparsity_loss(s1)\nmodel.add_loss(sparsity)\n# mse = custom_loss1()\n\nmodel.compile(optimizer = Adam(0.0001),loss=\"mse\")\n\n\n# %% [code]\nmodel.summary()\n\n# %% [code]\nmodel.fit(noiseAddedimages,images,epochs=40)\n\n# %% [code]\nlayer1weights = layer1.get_weights()\nactivation = \"sigmoid\"\nkernel_initializer = \"random_normal\"\n\ninputs = Input((32,32))\ns  = Lambda(lambda x: x) (inputs)\nlayer3 = Dense(32,activation=activation)\ns1 = layer3(s)\nlayer3.set_weights(layer1weights)\n\nmodel1 = Model(inputs = inputs,outputs=[s1])\n\n\n# %% [code]\nX= model.predict(noiseAddedimages[0].reshape(1,32,32))\nprint(noiseAddedimages[0].reshape((1024)).shape)\nprint(X.shape)\npyplot.imshow(X.reshape((DIM,DIM)),'gray')\npyplot.show()\npyplot.imshow(noiseAddedimages[0],'gray')\n\n# %% [code]\nimages1 = images\nimages1 = model1.predict(images)\n    \nnoiseAddedimages1 = noiseAddedimages\nnoiseAddedimages1= model1.predict(noiseAddedimages)\n\nlayer1weights = layer1.get_weights()\nlayer2weights = layer2.get_weights()\n\nactivation = \"sigmoid\"\nkernel_initializer = \"random_normal\"\n\ninputs = Input((32,32))\ns  = Lambda(lambda x: x) (inputs)\nlayer1 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns1 = layer1(s)\nlayer2 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns2 = layer2(s1)\n\nmodel2 = Model(inputs = inputs, outputs =[s2])\n\nsparsity = sparsity_loss(s1)\nmodel2.add_loss(sparsity)\n\nmodel2.compile(optimizer = Adam(0.0001),loss=\"mse\")\nmodel2.fit(noiseAddedimages1,images1,epochs=40)\n\nlayer3weights = layer1.get_weights()\nlayer4weights = layer2.get_weights()\n\n# %% [code]\ninputs = Input((32,32))\ns  = Lambda(lambda x: x) (inputs)\nlayer1 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns1 = layer1(s)\nlayer2 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns2 = layer2(s1)\nlayer3 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\ns3 = layer3(s2)\nlayer4 = Dense(32,activation=activation,kernel_regularizer=tf.keras.regularizers.l2(0.0001/2))\noutput = layer4(s3)\n\nlayer1.set_weights(layer1weights)\nlayer2.set_weights(layer3weights)\nlayer3.set_weights(layer4weights)\nlayer4.set_weights(layer2weights)\n\nmodelFinal = model1 = Model(inputs = inputs,outputs=[output])\nmodelFinal.compile(optimizer = Adam(0.0001),loss = \"mse\")\nmodelFinal.fit(noiseAddedimages,images,epochs=40)\n\n# %% [code]\nX= modelFinal.predict(noiseAddedimages[100].reshape(1,32,32))\nprint(noiseAddedimages[0].reshape((1024)).shape)\nprint(X.shape)\npyplot.imshow(X.reshape((32,32)),'gray')\npyplot.show()\npyplot.imshow(noiseAddedimages[100].reshape((32,32)),'gray')\npyplot.show()\npyplot.imshow(images[100].reshape((32,32)),'gray')","metadata":{"_uuid":"34402e24-0807-473f-a21f-65d1ea2b9664","_cell_guid":"b4137190-0ed5-46fd-adde-ec4c61c58a25","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}